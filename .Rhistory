max.words=10, min.freq = 1)
#Choose a specific font and order
wordcloud(df_frequency$word,
df_frequency$freq,
max.words=10, min.freq = 1,
random.order=FALSE,
family = "Helvatica", font = 3)
#Using a color palatte
install.packages("RColorBrewer")
install.packages("RColorBrewer")
#Using a color palatte
#install.packages("RColorBrewer")
library(RColorBrewer)
word_pal <- brewer.pal(10,"Dark2")
wordcloud(df_frequency$word,
df_frequency$freq,
max.words=20, min.freq = 1,
random.order=FALSE,
colors=word_pal, font = 3)
#install.packages("wordcloud")
library(wordcloud)
#Using a color palatte
#install.packages("RColorBrewer")
library(RColorBrewer)
word_pal <- brewer.pal(10,"Dark2")
wordcloud(df_frequency$word,
df_frequency$freq,
max.words=20, min.freq = 1,
random.order=FALSE,
colors=word_pal, font = 3)
#Load the movie reviews file and convert it into sentences
movie_reviews <- readLines(file(""C:/Users/Walter.Guillioli/OneDrive/MyDocuments/DataScience/Lynda/text_R_analytics_pred/reviews/Movie-Reviews.txt"))
review_text <- get_sentences(movie_reviews)
#See sentiments for each line
sentiment(review_text)
#Sentiment by each review
sentiments <- sentiment_by(review_text)
#--------------------------------------------------------------------------
#                  2.3.: Summarizing Sentiment
#--------------------------------------------------------------------------
#Convert sentiment data.table to a data frame
sentiment_df <- setDF(sentiments)
#Function that generates a sentiment class based on sentiment score
get_sentiment_class <- function(sentiment_score) {
sentiment_class = "Positive"
if ( sentiment_score < -0.3) {
sentiment_class = "Negative"
}
else if (sentiment_score < 0.3) {
sentiment_class = "Neutral"
}
sentiment_class
}
#add a sentiment_class attribute
sentiment_df$sentiment_class <-
sapply(sentiment_df$ave_sentiment,get_sentiment_class)
#Print resulting sentiment
sentiment_df[,4:5]
#Draw a pie chart
sentiment_summary <- count(sentiment_df, "sentiment_class")
pie(sentiment_summary$freq,
sentiment_summary$sentiment_class,
col=c("Red","Blue","Green"))
pie(emotion_summary$emotion_count, emotion_summary$emotion_type,
col= c("Red","Green","Blue","Orange","Brown","Purple") )
#--------------------------------------------------------------------------
#                  2.4.: Analyzing Emotions
#--------------------------------------------------------------------------
#Create a dataframe for emotions by review
emotion_df <- setDF(emotion_by(review_text))
emotion_df
#aggregate by emotion types and remove 0 values
emotion_summary=subset(
aggregate(emotion_count  ~ emotion_type ,
emotion_df, sum),
emotion_count > 0 )
#Draw a pie chart for emotion summary
#--------------------------------------------------------------------------
#Load the movie reviews file and convert it into sentences
movie_reviews <- readLines(file("C:/Users/Walter.Guillioli/OneDrive/MyDocuments/DataScience/Lynda/text_R_analytics_pred/reviews/Movie-Reviews.txt"))
?readLines
#Load the movie reviews file and convert it into sentences
movie_reviews <- readLines(file("C:/Users/Walter.Guillioli/OneDrive/MyDocuments/DataScience/Lynda/text_R_analytics_pred/reviews/Movie-Reviews.txt"))
movie_reviews
moview_reviews[1]
moview_reviews[[1]]
movie_reviews[[1]]
movie_reviews[1]
review_text <- get_sentences(movie_reviews)
install.packages("sentimentr")
library(sentimentr)
library(data.table)
library(plyr)
library(sentimentr)
library(data.table)
library(plyr)
review_text <- get_sentences(movie_reviews)
View(review_text)
review_text[[1]]
#See sentiments for each line
sentiment(review_text)
#Sentiment by each review
sentiments <- sentiment_by(review_text)
sentiments
?setDF
View(sentiments)
str(sentiments)
#Convert sentiment data.table to a data frame
sentiment_df <- setDF(sentiments)
str(sentiment_by)
str(sentiment_df)
#Function that generates a sentiment class based on sentiment score
get_sentiment_class <- function(sentiment_score) {
sentiment_class = "Positive"
if ( sentiment_score < -0.3) {
sentiment_class = "Negative"
}
else if (sentiment_score < 0.3) {
sentiment_class = "Neutral"
}
sentiment_class
}
View(sentiment_df)
#add a sentiment_class attribute
sentiment_df$sentiment_class <-
sapply(sentiment_df$ave_sentiment,get_sentiment_class)
#Print resulting sentiment
sentiment_df[,4:5]
sentiment_df
#Draw a pie chart
sentiment_summary <- count(sentiment_df, "sentiment_class")
pie(sentiment_summary$freq,
sentiment_summary$sentiment_class,
col=c("Red","Blue","Green"))
pie(emotion_summary$emotion_count, emotion_summary$emotion_type,
col= c("Red","Green","Blue","Orange","Brown","Purple") )
#Create a dataframe for emotions by review
emotion_df <- setDF(emotion_by(review_text))
?emotion_by
??emotion_by
emotion_by(review_text)
#aggregate by emotion types and remove 0 values
emotion_summary=subset(
aggregate(emotion_count  ~ emotion_type ,
emotion_df, sum),
emotion_count > 0 )
#Create a dataframe for emotions by review
emotion_df <- setDF(emotion_by(review_text))
#install.packages("sentimentr")
library(sentimentr)
library(sentimentr)
library(data.table)
library(plyr)
#Create a dataframe for emotions by review
emotion_df <- setDF(emotion_by(review_text))
#Create a dataframe for emotions by review
emotion_df <- setDF(emotion(review_text))
#Create a dataframe for emotions by review
emotion_df <- setDF(emotion_by(review_text))
#Create a dataframe for emotions by review
emotion_df <- setDF(sentimentr::emotion_by(review_text))
install.packages("sentimentr")
install.packages("sentimentr")
install.packages("sentimentr")
install.packages("sentimentr")
install.packages("sentimentr")
install.packages("sentimentr")
#install.packages("sentimentr")
library(sentimentr)
library(data.table)
library(plyr)
#--------------------------------------------------------------------------
#                  2.2.: Finding Sentiment
#--------------------------------------------------------------------------
#Load the movie reviews file and convert it into sentences
movie_reviews <- readLines(file("C:/Users/Walter.Guillioli/OneDrive/MyDocuments/DataScience/Lynda/text_R_analytics_pred/reviews/Movie-Reviews.txt"))
review_text <- get_sentences(movie_reviews)
#See sentiments for each line
sentiment(review_text)
#Sentiment by each review
sentiments <- sentiment_by(review_text)
sentiments
#Convert sentiment data.table to a data frame
sentiment_df <- setDF(sentiments)
#Function that generates a sentiment class based on sentiment score
get_sentiment_class <- function(sentiment_score) {
sentiment_class = "Positive"
if ( sentiment_score < -0.3) {
sentiment_class = "Negative"
}
else if (sentiment_score < 0.3) {
sentiment_class = "Neutral"
}
sentiment_class
}
#add a sentiment_class attribute
sentiment_df$sentiment_class <-
sapply(sentiment_df$ave_sentiment,get_sentiment_class)
#Print resulting sentiment
sentiment_df[,4:5]
#Draw a pie chart
sentiment_summary <- count(sentiment_df, "sentiment_class")
pie(sentiment_summary$freq,
sentiment_summary$sentiment_class,
col=c("Red","Blue","Green"))
#Create a dataframe for emotions by review
emotion_df <- setDF(sentimentr::emotion_by(review_text))
#Create a dataframe for emotions by review
emotion_df <- setDF(emotion_by(review_text))
?emotion_by
#Create a dataframe for emotions by review
emotion_df <- setDF(emotion_by(review_text))
require(tm)
require(tidyverse)
# iterate over all files and get artist/songname and lyrics
list.files(getwd())
# project setup
setwd("C:/Users/Walter.Guillioli/Documents/GitHub/heavymetal")
# iterate over all files and get artist/songname and lyrics
list.files(getwd())
getwd()
# iterate over all files and get artist/songname and lyrics
list.files(paste(getwd(), "/data/", sep="")
# iterate over all files and get artist/songname and lyrics
list.files(paste(getwd(), "/data/", sep=""))
# iterate over all files and get artist/songname and lyrics
list.files(paste(getwd(), "/data/", sep=""))
for (file in list.files(paste(getwd(), "/data/", sep=""))){
print(file)
}
strsplit("walter_gui", "_")
strsplit("walter_gui"_schi, "_")
strsplit("walter_gui"_schi"", "_")
strsplit("walter_gui"_schi", "_")
strsplit("walter_gui_schi", "_")
strsplit("walter_gui_schi", "_")[1]
strsplit("walter_gui_schi", "_")[[1]]
strsplit("walter_gui_schi", "_")[[2]]
strsplit("walter_gui_schi", "_")[1]
strsplit("walter_gui_schi", "_")[[1]][1]
strsplit("walter_gui_schi", "_")[[1]][1]
strsplit("walter_gui_schi", "_")[[1]][-1]
d <- c()
# iterate over all files and get artist/songname and lyrics
for (file in list.files(paste(getwd(), "/data/", sep=""))){
print(file)
artist <- strsplit("walter_gui_schi", "_")[[1]][1]
song <- artist <- strsplit("walter_gui_schi", "_")[[1]][-1]
d <- rbind(d, cbind(artist, song))
}
View(d)
# iterate over all files and get artist/songname and lyrics
for (file in list.files(paste(getwd(), "/data/", sep=""))){
print(file)
artist <- strsplit(file, "_")[[1]][1]
song <- artist <- strsplit("walter_gui_schi", "_")[[1]][-1]
d <- rbind(d, cbind(artist, song))
}
View(d)
d <- c()
# iterate over all files and get artist/songname and lyrics
for (file in list.files(paste(getwd(), "/data/", sep=""))){
print(file)
artist <- strsplit(file, "_")[[1]][1]
song <- artist <- strsplit("walter_gui_schi", "_")[[1]][-1]
d <- rbind(d, cbind(artist, song))
}
View(d)
d <- c()
# iterate over all files and get artist/songname and lyrics
for (file in list.files(paste(getwd(), "/data/", sep=""))){
print(file)
artist <- strsplit(file, "_")[[1]][1]
song <- artist <- strsplit(file, "_")[[1]][-1]
d <- rbind(d, cbind(artist, song))
}
View(d)
strsplit("maiden_hallowed_be_thy_name.txt", "_")[[1]][-1]
strsplit("maiden_hallowed_be_thy_name.txt", "_")[[1]][1]
d <- c()
# iterate over all files and get artist/songname and lyrics
for (file in list.files(paste(getwd(), "/data/", sep=""))){
print(file)
artist <- strsplit(file, "_")[[1]][1]
song <- artist <- strsplit(file, "_")[[1]][-1]
d <- rbind(d, c(artist, song))
}
d <- c()
# iterate over all files and get artist/songname and lyrics
for (file in list.files(paste(getwd(), "/data/", sep=""))){
print(file)
artist <- strsplit(file, "_")[[1]][1]
song <- artist <- strsplit(file, "_")[[1]][-1]
d <- rbind(d, cbind(artist, song))
}
# iterate over all files and get artist/songname and lyrics
for (file in list.files(paste(getwd(), "/data/", sep=""))){
print(file)
artist <- strsplit(file, "_")[[1]][1]
song <- artist <- strsplit(file, "_")[[1]][-1]
print(c(artist,song))
#d <- rbind(d, cbind(artist, song))
}
# iterate over all files and get artist/songname and lyrics
for (file in list.files(paste(getwd(), "/data/", sep=""))){
print(file)
artist <- strsplit(file, "_")[[1]][1]
song <- artist <- strsplit(file, "_")[[1]][-1]
print(artist)
#print(c(artist,song))
#d <- rbind(d, cbind(artist, song))
}
strsplit("maiden_hallowed_be_thy_name.txt", "_")[[1]][1]
strsplit("maiden_hallowed_be_thy_name.txt", "_")[[1]][-11]
strsplit("maiden_hallowed_be_thy_name.txt", "_")[[1]][-1]
strsplit("maiden_hallowed_be_thy_name.txt", "_")[[1]][1]
print(artist)
# iterate over all files and get artist/songname and lyrics
for (file in list.files(paste(getwd(), "/data/", sep=""))){
print(file)
artist <- strsplit(file, "_")[[1]][1]
song <- strsplit(file, "_")[[1]][-1]
print(artist)
#print(c(artist,song))
#d <- rbind(d, cbind(artist, song))
}
# iterate over all files and get artist/songname and lyrics
for (file in list.files(paste(getwd(), "/data/", sep=""))){
print(file)
artist <- strsplit(file, "_")[[1]][1]
song <- strsplit(file, "_")[[1]][-1]
print(artist)
#print(c(artist,song))
#d <- rbind(d, cbind(artist, song))
}
# iterate over all files and get artist/songname and lyrics
for (file in list.files(paste(getwd(), "/data/", sep=""))){
#  print(file)
artist <- strsplit(file, "_")[[1]][1]
song <- strsplit(file, "_")[[1]][-1]
print(artist)
#print(c(artist,song))
#d <- rbind(d, cbind(artist, song))
}
d <- c()
# iterate over all files and get artist/songname and lyrics
for (file in list.files(paste(getwd(), "/data/", sep=""))){
#  print(file)
artist <- strsplit(file, "_")[[1]][1]
song <- strsplit(file, "_")[[1]][-1]
print(artist)
#print(c(artist,song))
d <- rbind(d, cbind(artist, song))
}
View(d)
View(d)
# iterate over all files and get artist/songname and lyrics
for (file in list.files(paste(getwd(), "/data/", sep=""))){
#  print(file)
artist <- strsplit(file, "_")[[1]][1]
song <- strsplit(file, "_")[[1]][-1]
print(artist)
#print(c(artist,song))
d <- rbind(d, cbind(artist, song))
}
View(d)
d <- c()
# iterate over all files and get artist/songname and lyrics
for (file in list.files(paste(getwd(), "/data/", sep=""))){
#  print(file)
artist <- strsplit(file, "_")[[1]][1]
song <- strsplit(file, "_")[[1]][-1]
print(artist)
#print(c(artist,song))
d <- rbind(d, cbind(artist, song))
}
d <- c()
# iterate over all files and get artist/songname and lyrics
for (file in list.files(paste(getwd(), "/data/", sep=""))){
#  print(file)
artist <- strsplit(file, "_")[[1]][1]
song <- strsplit(file, "_")[[1]][-1]
print(artist)
#print(c(artist,song))
d <- rbind(d, cbind(artist, song))
}
View(d)
d <- c()
# iterate over all files and get artist/songname and lyrics
for (file in list.files(paste(getwd(), "/data/", sep=""))){
#  print(file)
artist <- strsplit(file, "_")[[1]][1]
song <- strsplit(file, "_")[[1]][-1]
print(artist)
#print(c(artist,song))
d <- rbind(d, cbind(artist, song))
}
View(d)
d <- c()
# iterate over all files and get artist/songname and lyrics
for (file in list.files(paste(getwd(), "/data/", sep=""))){
#  print(file)
artist <- strsplit(file, "_")[[1]][1] #before _
song <- strsplit(file, "_")[[1]][-1] #after _
song <- strsplit(song, ".")[[1]][1] #before .
print(artist)
#print(c(artist,song))
d <- rbind(d, cbind(artist, song))
}
View(d)
d <- c()
# iterate over all files and get artist/songname and lyrics
for (file in list.files(paste(getwd(), "/data/", sep=""))){
#  print(file)
artist <- strsplit(file, "_")[[1]][1] #before _
song <- strsplit(file, "_")[[1]][-1] #after _
song <- strsplit(song, ".")[1] #before .
print(artist)
#print(c(artist,song))
d <- rbind(d, cbind(artist, song))
}
strsplit("hallowed_be_thy_name.txt", ".")
strsplit("hallowed_be_thy_name.txt", ".")
strsplit("hallowed_be_thy_name.txt", "'.'")
strsplit("hallowed_be_thy_name.txt", "'.'")[1]
strsplit("hallowed_be_thy_name.txt", "'.'")[[1]]
strsplit("hallowed_be_thy_name.txt", "'.'")[[1]][1]
d <- c()
# iterate over all files and get artist/songname and lyrics
for (file in list.files(paste(getwd(), "/data/", sep=""))){
#  print(file)
artist <- strsplit(file, "_")[[1]][1] #before _
song <- strsplit(file, "_")[[1]][-1] #after _
#song <- strsplit(song, ".")[1] #before .
#print(artist)
#print(c(artist,song))
d <- rbind(d, cbind(artist, song))
}
View(d)
# iterate over all files and get artist/songname and lyrics
for (file in list.files(paste(getwd(), "/data/", sep=""))){
#  print(file)
artist <- strsplit(file, "_")[[1]][1] #before _
song <- strsplit(file, "_")[[1]][-1] #after _
#song <- strsplit(song, ".")[1] #before .
#print(artist)
#print(c(artist,song))
lyrics <- readLines(file(file))
d <- rbind(d, cbind(artist, song))
}
?readLines
# iterate over all files and get artist/songname and lyrics
for (file in list.files(paste(getwd(), "/data/", sep=""))){
#  print(file)
artist <- strsplit(file, "_")[[1]][1] #before _
song <- strsplit(file, "_")[[1]][-1] #after _
#song <- strsplit(song, ".")[1] #before .
#print(artist)
#print(c(artist,song))
lyrics <- readLines(file)
d <- rbind(d, cbind(artist, song))
}
# iterate over all files and get artist/songname and lyrics
for (file in list.files(paste(getwd(), "/data/", sep=""))){
#  print(file)
artist <- strsplit(file, "_")[[1]][1] #before _
song <- strsplit(file, "_")[[1]][-1] #after _
#song <- strsplit(song, ".")[1] #before .
#print(artist)
#print(c(artist,song))
lyrics <- readLines(file(paste(getwd(), "/data/", file, sep=""))))
d <- rbind(d, cbind(artist, song))
}
# iterate over all files and get artist/songname and lyrics
for (file in list.files(paste(getwd(), "/data/", sep=""))){
#  print(file)
artist <- strsplit(file, "_")[[1]][1] #before _
song <- strsplit(file, "_")[[1]][-1] #after _
#song <- strsplit(song, ".")[1] #before .
#print(artist)
#print(c(artist,song))
lyrics <- readLines(file(paste(getwd(), "/data/", file, sep="")))
d <- rbind(d, cbind(artist, song))
}
# iterate over all files and get artist/songname and lyrics
for (file in list.files(paste(getwd(), "/data/", sep=""))){
#  print(file)
artist <- strsplit(file, "_")[[1]][1] #before _
song <- strsplit(file, "_")[[1]][-1] #after _
#song <- strsplit(song, ".")[1] #before .
#print(artist)
#print(c(artist,song))
lyrics <- readLines(file(paste(getwd(), "/data/", file, sep="")))
d <- rbind(d, cbind(artist, song, lyrics))
}
View(d)
readLines(file("C:/Users/Walter.Guillioli/Documents/GitHub/heavymetal/data/maiden_hallowedbethyname.txt"))
x <- readLines(file("C:/Users/Walter.Guillioli/Documents/GitHub/heavymetal/data/maiden_hallowedbethyname.txt"))
x <- readLines(file("C:/Users/Walter.Guillioli/Documents/GitHub/heavymetal/data/maiden_hallowedbethyname.txt"))
d <- c()
# iterate over all files and get artist/songname and lyrics
for (file in list.files(paste(getwd(), "/data/", sep=""))){
#  print(file)
artist <- strsplit(file, "_")[[1]][1] #before _
song <- strsplit(file, "_")[[1]][-1] #after _
#song <- strsplit(song, ".")[1] #before .
#print(artist)
#print(c(artist,song))
lyrics <- readLines(file(paste(getwd(), "/data/", file, sep="")), warn = FALSE)
d <- rbind(d, cbind(artist, song, lyrics))
}
View(d)
